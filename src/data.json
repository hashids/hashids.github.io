{
	"contributors": [
		{
			"name": "kokic",
			"github": "kokic",
			"implementations": "Lean4"
		},
		{
			"name": "Remi Gillig",
			"github": "speps",
			"implementations": "Go"
		}, {
			"name": "Peter Hellberg",
			"github": "peterhellberg",
			"implementations": "Ruby"
		}, {
			"name": "David Aurelio",
			"github": "davidaurelio",
			"implementations": "Python"
		}, {
			"name": "Markus Ullmark",
			"github": "ullmark",
			"implementations": ".NET"
		}, {
			"name": "Zak B. Elep",
			"github": "zakame",
			"implementations": "Perl"
		}, {
			"name": "Leif Högberg",
			"github": "leihog",
			"implementations": "Lua"
		}, {
			"name": "fanweixiao",
			"github": "fanweixiao",
			"implementations": "Java"
		}, {
			"name": "Alexei Sholik",
			"github": "alco",
			"implementations": "Elixir"
		}, {
			"name": "Dan G. Switzer, II",
			"github": "dswitzer",
			"implementations": "ColdFusion"
		}, {
			"name": "Toon Schoenmakers",
			"github": "schoentoon",
			"implementations": "C++11"
		}, {
			"name": "John Ky",
			"github": "newhoggy",
			"implementations": "Scala"
		}, {
			"name": "Latchezar Tzvetkoff",
			"github": "tzvetkoff",
			"implementations": "C"
		}, {
			"name": "Denis Korolev",
			"github": "leprosus",
			"implementations": "Kotlin"
		}, {
			"name": "Adam Chesak",
			"github": "achesak",
			"implementations": "Nim"
		}, {
			"name": "Troy Morehouse",
			"github": "tmorehouse",
			"implementations": "VBA"
		}, {
			"name": "Mateusz Małczak",
			"github": "malczak",
			"implementations": "Swift"
		}, {
			"name": "Jason Strutz",
			"github": "jstrutz",
			"implementations": "Clojure"
		}, {
			"name": "Lee GiTack",
			"github": "snaiper80",
			"implementations": "Erlang"
		}, {
			"name": "Char Syam",
			"github": "charsyam",
			"implementations": "Rust"
		}, {
			"name": "Johannes Hildén",
			"github": "laserpants",
			"implementations": "Haskell"
		}, {
			"name": "Jovan Nikolić",
			"github": "jovanpn",
			"implementations": "ActionScript"
		}, {
			"name": "Ben Wilber",
			"github": "benwilber",
			"implementations": "Bash"
		}, {
			"name": "Alex Shum",
			"github": "ALShum",
			"implementations": "R"
		}, {
			"name": "Viking Edström",
			"github": "Actimia",
			"implementations": "D"
		}, {
			"name": "Rob Bertels",
			"github": "rbertels",
			"implementations": "F#"
		}, 
		{
			"name": "Wayne Bloss",
			"github": "waynebloss",
			"implementations": "TSQL"
		}, {
			"name": "Kevin Leung",
			"github": "kevinresol",
			"implementations": "Haxe"
		}, {
			"name": "Petre Damoc",
			"github": "pdamoc",
			"implementations": "Elm"
		}, {
			"name": "Alan Capewell",
			"github": "alacap",
			"implementations": "Smalltalk"
		}, {
			"name": "Carl D. Benson",
			"github": "DrGodCarl",
			"implementations": "Objective-C"
		}, {
			"name": "Bahtiar Gadimov",
			"github": "kalkin",
			"implementations": "Perl 6"
		}, {
			"name": "Peter Leitzen",
			"github": "splattael",
			"implementations": "Crystal"
		}, {
			"name": "Vincent Klaiber",
			"github": "vinkla",
			"implementations": "PHP"
		}, {
			"name": "Vahagn Mkrtchyan",
			"github": "iCyberon",
			"implementations": "PostgreSQL"
		}, {
			"name": "Vincent Jacques",
			"github": "jacquev6",
			"implementations": "OCaml"
		}, {
			"name": "Oleksandr Leuschenko",
			"github": "olexale",
			"implementations": "Dart"
		}, {
			"name": "Kennethan Ceyer",
			"github": "KennethanCeyer",
			"implementations": "Io"
		}, {
			"name": "Robert Hux",
			"github": "rhux",
			"implementations": "PLpgSQL"
		}, {
			"name": "GOTOH Shunsuke",
			"github": "antimon2",
			"implementations": "Julia"
		}, {
			"name": "Bazyli Brzóska",
			"github": "niieani",
			"implementations": "JavaScript"
		}
	],
	"implementations": {
		"javascript": {
			"lib": {
				"abbr": "javascript",
				"language": "JavaScript",
				"url": "https://github.com/niieani/hashids.js",
				"links": [
					{
						"title": "NPM package",
						"url": "https://www.npmjs.com/package/hashids"
					}, {
						"title": "Bower package",
						"url": "http://bower.io/search/?q=hashids"
					}
				]
			},
			"author": {
				"name": "Bazyli Brzóska",
				"twitter": "",
				"github": "niieani"
			},
			"example": "var hashids = new Hashids(\"this is my salt\"),\n  id = hashids.encode(1, 2, 3),\n  numbers = hashids.decode(id);",
			"download": "https://github.com/niieani/hashids.js"
		},
		"ruby": {
			"lib": {
				"abbr": "ruby",
				"language": "Ruby",
				"url": "https://github.com/peterhellberg/hashids.rb",
				"links": [
					{
						"title": "Ruby gem",
						"url": "https://rubygems.org/gems/hashids"
					}, {
						"title": "Rails plugin",
						"url": "https://rubygems.org/gems/hashid-rails"
					}
				]
			},
			"author": {
				"name": "Peter Hellberg",
				"twitter": "peterhellberg",
				"github": "peterhellberg"
			},
			"example": "hashids = Hashids.new \"this is my salt\"\nid = hashids.encode(1, 2, 3)\nnumbers = hashids.decode(id)",
			"download": "https://github.com/peterhellberg/hashids.rb/archive/v1.0.2.zip"
		},
		"python": {
			"lib": {
				"abbr": "python",
				"language": "Python",
				"url": "https://github.com/davidaurelio/hashids-python",
				"links": [
					{
						"title": "Python package",
						"url": "https://pypi.python.org/pypi/hashids/"
					}, {
						"title": "Django Hashid Field",
						"url": "https://github.com/nshafer/django-hashid-field"
					}
				]
			},
			"author": {
				"name": "David Aurelio",
				"twitter": "void_0",
				"github": "davidaurelio"
			},
			"example": "hashids = Hashids(salt=\"this is my salt\")\nid = hashids.encode(1, 2, 3)\nnumbers = hashids.decode(id)",
			"download": "https://github.com/davidaurelio/hashids-python/archive/v1.1.0.zip"
		},
		"java": {
			"lib": {
				"abbr": "java",
				"language": "Java",
				"url": "https://github.com/jiecao-fm/hashids-java",
				"links": [
					{
						"title": "Implementation by @arcticicestudio",
						"url": "https://github.com/arcticicestudio/icecore-hashids"
					}, {
						"title": "Implementation by @dkay",
						"url": "https://github.com/dkay/jhashids"
					}, {
						"title": "Hashids v0.1.4",
						"url": "https://github.com/peet/hashids.java"
					}
				]
			},
			"author": {
				"name": "fanweixiao",
				"twitter": "fanweixiao",
				"github": "fanweixiao"
			},
			"example": "Hashids hashids = new Hashids(\"this is my salt\");\nString id = hashids.encode(1, 2, 3);\nlong[] numbers = hashids.decode(id);",
			"download": "https://github.com/jiecao-fm/hashids-java/archive/v1.0.0.zip"
		},
		"scala": {
			"lib": {
				"abbr": "scala",
				"language": "Scala",
				"url": "https://github.com/newhoggy/hashids-scala",
				"links": []
			},
			"author": {
				"name": "John Ky",
				"twitter": "newhoggy",
				"github": "newhoggy"
			},
			"example": "val hashids = Hashids(\"this is my salt\")\nval id = hashids.encode(1L, 2L, 3L)\nval numbers = hashids.decode(id)",
			"download": "https://github.com/newhoggy/hashids-scala/archive/hashids-1.0.0.zip"
		},
		"php": {
			"lib": {
				"abbr": "php",
				"language": "PHP",
				"url": "https://github.com/vinkla/hashids.php",
				"links": [
					{
						"title": "Composer package",
						"url": "https://packagist.org/packages/hashids/hashids"
					}, {
						"title": "Laravel package",
						"url": "https://github.com/vinkla/hashids"
					}, {
						"title": "CodeIgniter spark",
						"url": "http://getsparks.org/packages/sk-hashids/versions/HEAD/show"
					}, {
						"title": "Symfony bundle",
						"url": "https://github.com/neoshadybeat/hashidsBundle"
					}, {
						"title": "Kohana module",
						"url": "http://kohana-modules.com/modules/pocesar/hashids-kohana"
					}, {
						"title": "WordPress plugin",
						"url": "http://wordpress.org/support/plugin/wp-hashed-ids"
					}, {
						"title": "CakePHP component",
						"url": "https://github.com/FinalDevStudio/cakephp-hashids"
					}, {
						"title": "Silex package",
						"url": "https://packagist.org/packages/redpanda/hashids-service-provider"
					}, {
						"title": "Craft plugin",
						"url": "https://github.com/alecritson/Slugged"
					}
				]
			},
			"author": {
				"name": "Vincent Klaiber",
				"twitter": "",
				"github": "vinkla"
			},
			"example": "$hashids = new Hashids\\Hashids('this is my salt');\n$id = $hashids->encode(1, 2, 3);\n$numbers = $hashids->decode($id);",
			"download": "https://github.com/vinkla/hashids.php/archive/1.0.5.zip"
		},
		"perl": {
			"lib": {
				"abbr": "perl",
				"language": "Perl",
				"url": "https://github.com/zakame/hashids.pm",
				"links": [
					{
						"title": "CPAN module",
						"url": "https://metacpan.org/module/Hashids"
					}
				]
			},
			"author": {
				"name": "Zak B. Elep",
				"twitter": "zakame",
				"github": "zakame"
			},
			"example": "my $hashids = Hashids->new('this is my salt');\nmy $id = $hashids->encode(1, 2, 3);\nmy $numbers = $hashids->decode($id);",
			"download": "https://github.com/zakame/hashids.pm/archive/1.000002.zip"
		},
		"objective-c": {
			"lib": {
				"abbr": "objective-c",
				"language": "Objective-C",
				"url": "https://github.com/DrGodCarl/hashids-objc",
				"links": [
					{
						"title": "Older v0.3",
						"url": "https://github.com/jofell/hashids-objc"
					}
				]
			},
			"author": {
				"name": "Carl D. Benson",
				"twitter": "",
				"github": "DrGodCarl"
			},
			"example": "NNLHashids *hashids = [[NNLHashids alloc] initWithSalt:@\"this is my salt\"];\nNSString *id = [hashids encodeMany:@[@1, @2, @3]]; // @\"laHquq\"\nNSArray<NSNumber*> *decoded = [hashids decode:@\"laHquq\"]; // @[@1, @2, @3]",
			"download": "https://github.com/DrGodCarl/hashids-objc/archive/master.zip"
		},
		"c": {
			"lib": {
				"abbr": "c",
				"language": "C",
				"url": "https://github.com/tzvetkoff/hashids.c",
				"links": []
			},
			"author": {
				"name": "Latchezar Tzvetkoff",
				"twitter": "tzvetkoff",
				"github": "tzvetkoff"
			},
			"example": "struct hashids_t *hashids;\nunsigned int bytes_encoded;\nchar hash[512];\nunsigned long long numbers[] = {1ull};\n\nhashids = hashids_init3(\"this is my salt\", 0, HASHIDS_DEFAULT_ALPHABET);\n\nbytes_encoded = hashids_encode(hashids, hash, sizeof(numbers) / sizeof(unsigned long long), numbers);\n/* hash => \"NV\", bytes_encoded => 2 */\n\nbytes_encoded = hashids_encode_v(hashids, hash, 5, 1ull, 2ull, 3ull, 4ull, 5ull);\n/* hash => \"zoHWuNhktp\", bytes_encoded => 10 */\n",
			"download": "https://github.com/tzvetkoff/hashids.c/archive/master.zip"
		},
		"cpp": {
			"lib": {
				"abbr": "cpp",
				"language": "C++11",
				"url": "https://github.com/schoentoon/hashidsxx",
				"links": []
			},
			"author": {
				"name": "Toon Schoenmakers",
				"twitter": "Schoentoon",
				"github": "schoentoon"
			},
			"example": "hashidsxx::Hashids hash(\"this is my salt\");\nstd::string id = hash.encode({1, 2, 3});\nstd::vector<uint32_t> numbers = hash.decode(id);",
			"download": "https://github.com/schoentoon/hashidsxx/archive/master.zip"
		},
		"go": {
			"lib": {
				"abbr": "go",
				"language": "Go",
				"url": "https://github.com/speps/go-hashids",
				"links": [
					{
						"title": "Go doc",
						"url": "http://godoc.org/github.com/speps/go-hashids"
					}
				]
			},
			"author": {
				"name": "Remi Gillig",
				"twitter": "remigillig",
				"github": "speps"
			},
			"example": "hd := hashids.NewData()\nhd.Salt = \"this is my salt\"\nh := hashids.NewWithData(hd)\nid, _ := h.Encode([]int{1, 2, 3})\nnumbers, _ := h.DecodeWithError(id)",
			"download": "https://github.com/speps/go-hashids/archive/master.zip"
		},
		"lua": {
			"lib": {
				"abbr": "lua",
				"language": "Lua",
				"url": "https://github.com/leihog/hashids.lua",
				"links": []
			},
			"author": {
				"name": "Leif Högberg",
				"twitter": "leihog",
				"github": "leihog"
			},
			"example": "local h = hashids.new(\"this is my salt\");\nlocal id = h:encode(1, 2, 3);\nlocal numbers = h:decode(id);",
			"download": "https://github.com/leihog/hashids.lua/archive/v1.0.0.zip"
		},
		"elixir": {
			"lib": {
				"abbr": "elixir",
				"language": "Elixir",
				"url": "https://github.com/alco/hashids-elixir",
				"links": [
					{
						"title": "Hex.pm package",
						"url": "https://hex.pm/packages/hashids"
					}
				]
			},
			"author": {
				"name": "Alexei Sholik",
				"twitter": "true_droid",
				"github": "alco"
			},
			"example": "hashids = Hashids.new(salt: \"this is my salt\")\nid = Hashids.encode(hashids, [1, 2, 3])\nnumbers = Hashids.decode!(hashids, id)",
			"download": "https://github.com/alco/hashids-elixir/archive/v1.0.0.zip"
		},
		"coldfusion": {
			"lib": {
				"abbr": "coldfusion",
				"language": "ColdFusion",
				"url": "https://github.com/dswitzer/hashids.coldfusion",
				"links": []
			},
			"author": {
				"name": "Dan G. Switzer, II",
				"twitter": "dswitzer2",
				"github": "dswitzer"
			},
			"example": "var hashids = new Hashids(\"this is my salt\");\nvar id = hashids.encode(1, 2, 3);\nvar numbers = hashids.decode(id);",
			"download": "https://github.com/dswitzer/hashids.coldfusion/archive/v0.1.0.zip"
		},
		"net": {
			"lib": {
				"abbr": "net",
				"language": ".NET",
				"url": "https://github.com/ullmark/hashids.net",
				"links": [
					{
						"title": "NuGet package",
						"url": "http://nuget.org/packages/Hashids.net/"
					}, {
						"title": "Hashids v0.3.0",
						"url": "https://github.com/Mindflash/hashids.net"
					}
				]
			},
			"author": {
				"name": "Markus Ullmark",
				"twitter": "ullmark",
				"github": "ullmark"
			},
			"example": "var hashids = new Hashids(\"this is my salt\");\nvar id = hashids.Encode(1, 2, 3);\nvar numbers = hashids.Decode(id);",
			"download": "https://github.com/ullmark/hashids.net/archive/v1.0.0.zip"
		},
		"kotlin": {
			"lib": {
				"abbr": "kotlin",
				"language": "Kotlin",
				"url": "https://github.com/leprosus/kotlin-hashids",
				"links": []
			},
			"author": {
				"name": "Denis Korolev",
				"twitter": "leprosus_ru",
				"github": "leprosus"
			},
			"example": "val hashids = Hashids(\"this is my salt\")\nval id: String = hashids.encode(1, 2, 3)\nval numbers: LongArray = hashids.decode(id)",
			"download": "https://github.com/leprosus/kotlin-hashids/archive/master.zip"
		},
		"nim": {
			"lib": {
				"abbr": "nim",
				"language": "Nim",
				"url": "https://github.com/achesak/nim-hashids",
				"links": []
			},
			"author": {
				"name": "Adam Chesak",
				"twitter": "",
				"github": "achesak"
			},
			"example": "let hashids: Hashids = createHashids(\"this is my salt\")\nlet id: string = hashids.encode(@[1, 2, 3])\nlet numbers: seq[int] = hashids.decode(id)",
			"download": "https://github.com/achesak/nim-hashids/archive/master.zip"
		},
		"vba": {
			"lib": {
				"abbr": "vba",
				"language": "VBA",
				"url": "https://github.com/tmorehouse/hashids.vba",
				"links": []
			},
			"author": {
				"name": "Troy Morehouse",
				"twitter": "helacopta",
				"github": "tmorehouse"
			},
			"example": "Dim hid As hashids\nSet hid = new Hashids\nhid.Params(\"this is my salt\")\nid = hid.Encode(1, 2, 3)\nnumbers = hid.Decode(id)",
			"download": "https://github.com/tmorehouse/hashids.vba/archive/master.zip"
		},
		"swift": {
			"lib": {
				"abbr": "swift",
				"language": "Swift",
				"url": "https://github.com/malczak/hashids",
				"links": []
			},
			"author": {
				"name": "Mateusz Małczak",
				"twitter": "",
				"github": "malczak"
			},
			"example": "var hashids = Hashids(salt:\"this is my salt\");\nvar hash = hashids.encode(1, 2, 3);\nvar values = hashids.decode(s!);",
			"download": "https://github.com/malczak/hashids/archive/master.zip"
		},
		"clojure": {
			"lib": {
				"abbr": "clojure",
				"language": "Clojure",
				"url": "https://github.com/jstrutz/hashids.clj",
				"links": []
			},
			"author": {
				"name": "Jason Strutz",
				"twitter": "",
				"github": "jstrutz"
			},
			"example": "(require '[hashids.core :as h])\n(def hashids-opts {:salt \"this is my salt\"})\n(h/encode hashids-opts 1, 2, 3)\n(h/decode hashids-opts \"laHquq\")",
			"download": "https://github.com/jstrutz/hashids.clj/archive/1.0.1.zip"
		},
		"erlang": {
			"lib": {
				"abbr": "erlang",
				"language": "Erlang",
				"url": "https://github.com/snaiper80/hashids-erlang",
				"links": []
			},
			"author": {
				"name": "Lee GiTack",
				"twitter": "justdevelop",
				"github": "snaiper80"
			},
			"example": "Ctx = hashids:new([{salt, \"this is my salt\"}]).\nId = hashids:encode(Ctx, [1, 2, 3]).\nNumbers = hashids:decode(Ctx, Id).",
			"download": "https://github.com/snaiper80/hashids-erlang/archive/master.zip"
		},
		"rust": {
			"lib": {
				"abbr": "rust",
				"language": "Rust",
				"url": "https://github.com/charsyam/hashids_rust",
				"links": [
					{
						"title": "Cargo Crate",
						"url": "https://crates.io/crates/hashids"
					}
				]
			},
			"author": {
				"name": "Char Syam",
				"twitter": "charsyam",
				"github": "charsyam"
			},
			"example": "let ids_some = HashIds::new_with_salt(\"this is my salt\".to_string());\nlet ids = match ids_some {\n  Ok(v) => { v }\n  Err(e) => {\n    println!(\"error\");\n    return;\n  }\n};\nlet n: Vec<i64> = vec![1, 2, 3];\nlet id = ids.encode(&n);\nlet numbers = ids.decode(id);",
			"download": "https://github.com/charsyam/hashids_rust/archive/master.zip"
		},
		"haskell": {
			"lib": {
				"abbr": "haskell",
				"language": "Haskell",
				"url": "https://github.com/laserpants/hashids-haskell",
				"links": [
					{
						"title": "Haskell Package",
						"url": "https://hackage.haskell.org/package/hashids"
					}
				]
			},
			"author": {
				"name": "Johannes Hildén",
				"twitter": "",
				"github": "laserpants"
			},
			"example": "let hashids = hashidsSimple \"this is my salt\"\n    _id = encodeList hashids [1, 2, 3]\n    numbers = decode hashids _id",
			"download": "https://github.com/laserpants/hashids-haskell/archive/master.zip"
		},
		"actionscript": {
			"lib": {
				"abbr": "actionscript",
				"language": "ActionScript",
				"url": "https://github.com/jovanpn/hashids.as",
				"links": []
			},
			"author": {
				"name": "Jovan Nikolić",
				"twitter": "",
				"github": "jovanpn"
			},
			"example": "var hashids:Hashids = new Hashids(\"this is my salt\");\nvar id:String = hashids.encode(1, 2, 3);\nvar numbers:Vector.<Number> = hashids.decode(id);",
			"download": "https://github.com/jovanpn/hashids.as/archive/master.zip"
		},
		"bash": {
			"lib": {
				"abbr": "bash",
				"language": "Bash",
				"url": "https://github.com/benwilber/bashids",
				"links": []
			},
			"author": {
				"name": "Ben Wilber",
				"twitter": "benwilber",
				"github": "benwilber"
			},
			"example": "bashids -e -s \"this is my salt\" 1 2 3\nbashids -d -s \"this is my salt\" laHquq",
			"download": "https://github.com/benwilber/bashids/archive/v1.0.zip"
		},
		"r": {
			"lib": {
				"abbr": "r",
				"language": "R",
				"url": "https://github.com/ALShum/hashids-r",
				"links": [
					{
						"title": "CRAN package",
						"url": "https://cran.r-project.org/web/packages/hashids/"
					}
				]
			},
			"author": {
				"name": "Alex Shum",
				"twitter": "NotAlexShum",
				"github": "ALShum"
			},
			"example": "h = hashid_settings(salt = 'this is my salt')\nencode(c(1, 2, 3), h) #\"laHquq\"\ndecode(\"laHquq\", h) #c(1, 2, 3)",
			"download": "https://github.com/ALShum/hashids-r/archive/master.zip"
		},
		"d": {
			"lib": {
				"abbr": "d",
				"language": "D",
				"url": "https://github.com/actimia/hashids-dlang",
				"links": [
					{
						"title": "Hashids package",
						"url": "http://code.dlang.org/packages/hashids"
					}
				]
			},
			"author": {
				"name": "Viking Edström",
				"twitter": "",
				"github": "Actimia"
			},
			"example": "auto h = new Hashids(\"this is my salt\");\nstring id = h.encode(1, 2, 3); // \"laHquq\"\nulong[] numbers = h.decode(id); // [1, 2, 3]",
			"download": "https://github.com/Actimia/hashids-dlang/archive/v1.0.0.zip"
		},
		"f-sharp": {
			"lib": {
				"abbr": "f-sharp",
				"language": "F#",
				"url": "https://github.com/rbertels/hashids-fs",
				"links": []
			},
			"author": {
				"name": "Rob Bertels",
				"twitter": "",
				"github": "rbertels"
			},
			"example": "let config = HashidConfiguration.withSalt \"this is my salt\"\nlet id = Hashid.encode config [| 1; 2; 3 |]\nlet numbers = Hashid.decode config id",
			"download": "https://github.com/rbertels/hashids-fs/archive/master.zip"
		},
		"tsql": {
			"lib": {
				"abbr": "tsql",
				"language": "TSQL",
				"url": "https://github.com/waynebloss/hashids-tsql",
				"links": []
			},
			"author": {
				"name": "Wayne Bloss",
				"twitter": "",
				"github": "waynebloss"
			},
			"example": "insert into my_table(id) values(dbo.encode1(1));\ninsert into my_table(id) values(dbo.encode2(1, 2));",
			"download": "https://github.com/waynebloss/hashids-tsql/archive/master.zip"
		},
		"haxe": {
			"lib": {
				"abbr": "haxe",
				"language": "Haxe",
				"url": "https://github.com/kevinresol/hashids",
				"links": []
			},
			"author": {
				"name": "Kevin Leung",
				"twitter": "",
				"github": "kevinresol"
			},
			"example": "var hashids = new Hashids(\"this is my salt\");\nvar id = hashids.encode([1, 2, 3]);\nvar numbers = hashids.decode(id);",
			"download": "https://github.com/kevinresol/hashids/archive/master.zip"
		},
		"elm": {
			"lib": {
				"abbr": "elm",
				"language": "Elm",
				"url": "https://github.com/pdamoc/elm-hashids",
				"links": [
					{
						"title": "Elm package",
						"url": "http://package.elm-lang.org/packages/pdamoc/elm-hashids/1.0.1/"
					}
				]
			},
			"author": {
				"name": "Petre Damoc",
				"twitter": "",
				"github": "pdamoc"
			},
			"example": "hashids = hashidsSimple \"this is my salt\"\nid = encodeList hashids [1, 2, 3]\nnumbers = decode hashids id",
			"download": "https://github.com/pdamoc/elm-hashids/archive/1.0.1.tar.gz"
		},
		"smalltalk": {
			"lib": {
				"abbr": "smalltalk",
				"language": "Smalltalk",
				"url": "https://github.com/alacap/hashids-pharo",
				"links": []
			},
			"author": {
				"name": "Alan Capewell",
				"twitter": "",
				"github": "alacap"
			},
			"example": "| hasher|\nhasher := HidHasher newSalt: 'this is my salt'.\nhasher encode: #(1 2 3).\nhasher decode: 'laHquq'",
			"download": "https://github.com/alacap/hashids-pharo/archive/v1.0.1.tar.gz"
		},
		"perl6": {
			"lib": {
				"abbr": "perl6",
				"language": "Perl 6",
				"url": "https://github.com/kalkin/perl6-hashids",
				"links": []
			},
			"author": {
				"name": "Bahtiar Gadimov",
				"twitter": "",
				"github": "kalkin"
			},
			"example": "my $hashids = Hashids.new('this is my salt');\nmy $id = $hashids.encode(1, 2, 3); # 'laHquq'\nmy @numbers = $hashids.decode($id); # (1, 2, 3)",
			"download": "https://github.com/kalkin/perl6-hashids/archive/0.1.zip"
		},
		"crystal": {
			"lib": {
				"abbr": "crystal",
				"language": "Crystal",
				"url": "https://github.com/splattael/hashids.cr",
				"links": []
			},
			"author": {
				"name": "Peter Leitzen",
				"twitter": "",
				"github": "splattael"
			},
			"example": "hashids = Hashids.new(salt: \"this is my salt\")\nid = hashids.encode([1, 2, 3]) # => laHquq\nnumbers = hashids.decode(id) # => [1, 2, 3]",
			"download": "https://github.com/splattael/hashids.cr/archive/v0.1.0.zip"
		},
		"postgresql": {
			"lib": {
				"abbr": "postgresql",
				"language": "PostgreSQL",
				"url": "https://github.com/iCyberon/pg_hashids",
				"links": []
			},
			"author": {
				"name": "Vahagn Mkrtchyan",
				"twitter": "iCyber0n",
				"github": "iCyberon"
			},
			"example": "SELECT hash_encode(123, 'this is my salt', 10); -- Result: 4xpAYDx0mQ\nSELECT hash_decode('4xpAYDx0mQ', 'this is my salt', 10); -- Result: 123",
			"download": "https://github.com/iCyberon/pg_hashids/archive/master.zip"
		},
		"ocaml": {
			"lib": {
				"abbr": "ocaml",
				"language": "OCaml",
				"url": "https://github.com/jacquev6/hashids-ocaml",
				"links": [
					{
						"title": "OPAM package",
						"url": "https://opam.ocaml.org/packages/hashids"
					}
				]
			},
			"author": {
				"name": "Vincent Jacques",
				"twitter": "jacquev6",
				"github": "jacquev6"
			},
			"example": "let config = Hashids.make ~salt:\"this is my salt\" ();;\nlet id = Hashids.encode config [1; 2; 3];;\nlet numbers = Hashids.decode config id;;",
			"download": "https://github.com/jacquev6/hashids-ocaml/archive/1.0.0.zip"
		},
		"dart": {
			"lib": {
				"abbr": "dart",
				"language": "Dart",
				"url": "https://github.com/olexale/hashids",
				"links": [
					{
						"title": "Package",
						"url": "https://pub.dartlang.org/packages/hashids2"
					}, {
						"title": "Dart 1 Implementation",
						"url": "https://github.com/isapoetra/hashids"
					}
				]
			},
			"author": {
				"name": "Oleksandr Leuschenko",
				"twitter": "olexale",
				"github": "olexale"
			},
			"example": "final hashids = HashIds('this is my salt');\nfinal id = hashids.encode([1,2,3]);\nfinal numbers = hashids.decode(id);",
			"download": "https://github.com/olexale/hashids/archive/v1.0.1.zip"
		},
		"io": {
			"lib": {
				"abbr": "io",
				"language": "Io",
				"url": "https://github.com/KennethanCeyer/hashids-io",
				"links": []
			},
			"author": {
				"name": "Kennethan Ceyer",
				"twitter": "",
				"github": "KennethanCeyer"
			},
			"example": "salt := \"this is my salt\"\nh := hashids(salt)\nid := h encode(1, 2, 3)\nnumbers := h decode(id)",
			"download": "https://github.com/KennethanCeyer/hashids-io"
		},
		"plpgsql": {
			"lib": {
				"abbr": "plpgsql",
				"language": "PLpgSQL",
				"url": "https://github.com/array-analytics/plpg_hashids",
				"links": []
			},
			"author": {
				"name": "Robert Hux",
				"twitter": "",
				"github": "rhux"
			},
			"example": "SELECT hashids.encode(1234567, 'This is my salt', 10); -- Result: PlRPdzxpR7\nSELECT unnest(hashids.decode('PlRPdzxpR7', 'This is my salt', 10)); -- Result: 1234567",
			"download": "https://github.com/array-analytics/plpg_hashids"
		},
		"julia": {
			"lib": {
				"abbr": "julia",
				"language": "Julia",
				"url": "https://github.com/antimon2/Hashids.jl",
				"links": []
			},
			"author": {
				"name": "GOTOH Shunsuke",
				"twitter": "antimon2",
				"github": "antimon2"
			},
			"example": "config = Hashids.configure(\"this is my salt\")\nid = encode(config, 1, 2, 3)\nnumbers = decode(config, id)",
			"download": "https://github.com/antimon2/Hashids.jl"
		}, 
		"lean4": {
			"lib": {
				"abbr": "lean4",
				"language": "Lean4",
				"url": "https://github.com/kokic/hashids-lean4",
				"links": []
			},
			"author": {
				"name": "kokic",
				"github": "kokic"
			},
			"example": "def hashids : Hashids := Hashids.fromSalt \"this is my salt\"\n#eval hashids.encode [12345]\n#eval hashids.decode \"NkK9\"",
			"download": "https://github.com/kokic/hashids-lean4/archive/refs/heads/main.zip"
		},
	}
}
